import config from "../config/config";
import { Client, Account, ID } from "appwrite";

/**
 * AuthService Class - Handles all authentication operations using Appwrite
 *
 * This service provides a centralized way to manage user authentication
 * including account creation, login, logout, and getting current user info.
 * It acts as a wrapper around Appwrite's authentication SDK.
 */
export class AuthService {
  client = new Client(); // Appwrite client instance
  account; // Account service instance for auth operations

  /**
   * Constructor - Initializes the Appwrite client and account service
   * Sets up the connection to your Appwrite backend
   */
  constructor() {
    // Configure the Appwrite client with your project details
    this.client
      .setEndpoint(config.appwriteUrl) // Your Appwrite server URL
      .setProject(config.appwriteProjectID); // Your unique project ID

    // Initialize the Account service for authentication operations
    this.account = new Account(this.client);
  }

  /**
   * Create New User Account
   *
   * @param {Object} userData - User registration data
   * @param {string} userData.email - User's email address
   * @param {string} userData.password - User's password
   * @param {string} userData.name - User's display name
   * @returns {Promise} - Session object if successful, error if failed
   *
   * This method creates a new user account and automatically logs them in
   */
  async createAccount({ email, password, name }) {
    try {
      // Create new user account with unique ID generated by Appwrite
      const userAccount = await this.account.create(
        ID.unique(), // Appwrite generates a unique user ID
        email,
        password,
        name
      );

      if (userAccount) {
        // Account created successfully, now log the user in automatically
        // This provides a seamless user experience - no need to login after signup
        return this.loginAccount({ email, password });
      } else {
        // Return the account object if creation was successful but no auto-login
        return userAccount;
      }
    } catch (error) {
      // Re-throw error to be handled by the calling component
      // This allows UI components to show appropriate error messages
      throw error;
    }
  }

  /**
   * Login Existing User
   *
   * @param {Object} credentials - Login credentials
   * @param {string} credentials.email - User's email
   * @param {string} credentials.password - User's password
   * @returns {Promise} - Session object containing auth tokens and user info
   *
   * Creates an email/password session for the user
   */
  async loginAccount({ email, password }) {
    try {
      // Create a new session using email and password
      // This returns session data including authentication tokens
      return await this.account.createEmailPasswordSession(email, password);
    } catch (error) {
      // Pass error up to calling component for proper error handling
      throw error;
    }
  }

  /**
   * Get Current Logged-in User
   *
   * @returns {Promise} - Current user object or null if not logged in
   *
   * Retrieves the currently authenticated user's information
   * Useful for checking if user is logged in and getting user details
   */
  async getCurrentUser() {
    try {
      // Get current user account information
      // Returns user object with id, email, name, etc.
      return await this.account.get();
    } catch (error) {
      // If error occurs (like user not logged in), throw it
      if (error.code === 401) {
        console.warn("User is not logged in (guest)");
      } else {
        console.error("Unexpected error:", error);
      }
      return null;
    }

    // Note: This return statement is unreachable due to try/catch above
    // Consider removing it or restructuring the error handling
    // return null;
  }

  /**
   * Logout User
   *
   * @returns {Promise} - Resolves when logout is complete
   *
   * Logs out the user by deleting all active sessions
   * This invalidates all authentication tokens
   */
  async logOut() {
    try {
      // Delete all active sessions for the current user
      // This effectively logs them out from all devices
      await this.account.deleteSessions();
    } catch (error) {
      // Handle logout errors (network issues, etc.)
      throw error;
    }
  }
}

// Create a singleton instance of AuthService
// This ensures the same instance is used throughout the application
// and maintains consistent authentication state
const authService = new AuthService();

// Export the singleton instance as default
// Import this in components like: import authService from './auth'
export default authService;
